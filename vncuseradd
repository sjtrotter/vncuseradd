#!/usr/bin/env bash

readonly ERR_NO_VNCSRV=64
readonly ERR_UNK_OPT=65
readonly ERR_NO_LOGIN=66
readonly ERR_NO_PASSWD=67
readonly USER_FILE="/tmp/newusers"
readonly ANSI_RED="\033[1;31m"
readonly ANSI_CLEAR="\033[0m"
readonly ANSI_YELLOW="\033[1;93m"


unset ADMIN
unset PASSWORD
unset DEBUG
ARGS=()
CURRENT_SYS_USERS=()
CURRENT_VNC_USERS=()
CHOWN_LIST=()



finish () {
    local rc="$1"
    local msg="$2"
    if [[ $rc -gt 0 ]]; then
        printf "${ANSI_RED}%s: %s${ANSI_CLEAR}\n" "$(basename $0)" "${msg}"
        usage
    fi
    exit ${rc}
} >&2

usage () {
    printf "\n\
$(basename $0)  - adds new LOGIN(s) with VNC capabilities\n\
* needs TigerVNC Server installed with config at /etc/tigervnc/vncserver.users\n\
VNC passwords are set to 'password' by default.\n\
\n\
Usage: vncuseradd [OPTION] -p PASSWORD LOGIN [LOGIN]...\n\
\n\
Options:\n\
  -a            make the LOGIN(s) an admin account\n\
  -p PASSWORD   password of the new account\n\
                for more than one LOGIN, PASSWORD will apply to all. \n\
                this input method is *NOT SECURE*. have user change ASAP.\n\
  -h            display this help message and exit \n\
  -v            turn on debug
\n"
}

parse_args () {
    optstring="ahp:v"

    while [[ $OPTIND -le "$#" ]]; do
        if getopts ${optstring} arg; then
            case ${arg} in
                a) ADMIN=yes ;;
                h) usage; finish 0 "";;
                p) PASSWORD="${OPTARG}" ;;
                v) DEBUG=yes ;;
                ?) finish 2 "unkown option: ${OPTARG}";;
            esac
        else
            ARGS+=("${!OPTIND}")
            ((OPTIND++))
        fi
    done

    if [[ ${#ARGS[@]} -lt 1  ]]; then
        finish $ERR_NO_LOGIN "no LOGIN given"
    fi

    if [[ ! ${PASSWORD} ]]; then
        finish $ERR_NO_PASSWD "no PASSWORD given"
    fi
}

write_userfile () {
    local user="$1"
    local userfile="$2"
    debug "writing $user to $userfile"
    if [[ ! -f ${userfile} ]]; then touch ${userfile}; fi
    printf "$user:$PASSWORD:::$user:/home/$user:/bin/bash\n" >> "${userfile}"
}

create_home () {
    local user="$1"
    if [[ ! -d /home/${user} ]]; then
        debug "creating $user's homedir"
        sudo cp -r /etc/skel /home/$user
    else
        debug "skipping $user's homedir, already there"
    fi
}

create_users () {
    local userfile="$1"
    debug "creating users from ${userfile}"
    sudo newusers "${userfile}"
    rm -rf "${userfile}"
}

chown_home () {
    local user="$1"
    debug "chown $user's homedir"
    sudo chown -R $user:$user /home/$user
}

set_vnc () {
    for user in ${ARGS[@]}; do
        if [[ "$(grep $user /etc/tigervnc/vncserver.users | cut -d '=' -f2)" -ne "$user" ]]; then
            uid=$(id -u ${user})
            display_num="${uid:2:2}"

            if [[ ${display_num:0:1} -eq 0 ]]; then
                display_num="${display_num:1:1}"
            fi

            display_num="$((${display_num}+10))"
            display=":${display_num}"

            printf "${display}=${user}\n" | sudo tee -a /etc/tigervnc/vncserver.users > /dev/null

            sudo su $user -c 'printf "password\npassword\n" | vncpasswd 2>&1>/dev/null' >/dev/null

            sudo systemctl --quiet enable "vncserver@${display}.service"
            sudo systemctl --quiet start "vncserver@${display}.service"
        fi
    done
}

set_admin () {
    local user="$1"
    debug "making $user admin"
    sudo usermod -aG wheel $user
}

print_userports () {
    for user in ${ARGS[@]}; do
        display="$(grep $user /etc/tigervnc/vncserver.users)"
        for line in ${display}; do
            if [[ $(echo "$line" | cut -d '=' -f2) == "$user" ]]; then
                display_line="$line"
            fi
        done
        display=$(echo $display_line | cut -d '=' -f1 | cut -d ":" -f2)
        printf "$user - port 59$display\n"
    done
        printf "MAKE SURE users change passwords on login!\n"
        printf '`passwd` and also `vncpasswd` in terminal.'
        echo
}

get_sysusers () {
    debug "getting system user list..."
    syslist=($(cat /etc/passwd))
    for ((i=0; i<${#syslist[@]}; i++)); do
        syslist[$i]=$(echo ${syslist[$i]} | cut -d ':' -f1)
    done

    local dbstr="found system users:"
    for item in ${syslist[@]}; do
        dbstr="${dbstr} $item"
    done
    debug "$dbstr"
    echo "${syslist[@]}"
}

get_vncusers () {
    debug "getting VNC user list..."
    vnclist=($(grep -v "#" /etc/tigervnc/vncserver.users))
    for ((i=0; i<${#vnclist[@]}; i++)); do
        vnclist[$i]=$(echo ${vnclist[$i]} | cut -d '=' -f2)
    done
    
    local dbstr="found vnc users:"
    for item in ${vnclist[@]}; do
        dbstr="${dbstr} $item"
    done
    debug "$dbstr"
    echo "${vnclist[@]}"
}

debug () {
    local msg="$1"
    if [[ ${DEBUG} ]]; then
        printf "${ANSI_YELLOW}[-]${ANSI_CLEAR} %s\n" "${msg}" >&2
    fi
}

main () {
    parse_args "$@" # sets ARGS[@] to supplied usernames
    CURRENT_SYS_USERS=($(get_sysusers))
    CURRENT_VNC_USERS=($(get_vncusers))
    # pre-create user
    for user in ${ARGS[@]}; do
        if [[ ! " ${CURRENT_SYS_USERS[@]} " =~ " ${user} " ]]; then
            create_home "$user"
            write_userfile "$user" "${USER_FILE}"
            CHOWN_LIST+=("$user")
        else
            debug "skipping $user, already created"
        fi
    done

    if [[ -f ${USER_FILE} ]]; then
        create_users "${USER_FILE}"
        for user in ${CHOWN_LIST[@]}; do
            chown_home $user
            if [[ "${ADMIN}" == "yes" ]];then
                set_admin $user
            fi
        done
    fi

    # post-create user
    for user in ${ARGS[@]}; do
        if [[ " ${CURRENT_VNC_USERS[@]} " =~ " ${user} " ]]; then
            printf "${user} already in vnc\n"
        fi
    done
    # write_userfile
    # create_users
    # set_admin
    # set_vnc
    # print_userports
}

if [[ ! -f /etc/tigervnc/vncserver.users ]]; then
    finish $ERR_NO_VNCSRV "tigervnc-server not installed"
fi

if [[ $(basename $0) == "vncuseradd" ]]; then main "$@"; fi
